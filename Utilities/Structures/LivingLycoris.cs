using Laugicality.Content.Tiles;
using Terraria;
using Terraria.ModLoader;

namespace Laugicality.Utilities.Structures
{
    public class LivingLycoris
    {
        private static readonly int[,] _structureArray = new int[,]
        {
                {0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0}
,                {0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0}
,                {0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1}
,                {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0}
,                {0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0}
,                {0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0}
,                {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
,                {0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1}
,                {0,0,0,0,0,0,2,2,2,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1}
,                {0,0,0,0,0,0,0,2,2,2,0,0,0,1,1,1,1,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,2,2,2,2,0,1,2,2,2,9,9,2,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,9,9,9,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,2,2,2,2,9,9,9,9,9,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,2,2,2,9,9,9,9,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,2,2,9,9,9,9,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0}
,                {0,0,0,0,0,0,0,0,0,0,2,2,9,9,9,9,2,2,0,2,2,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0}
,                {0,0,0,0,0,0,0,0,0,0,2,2,9,9,9,9,2,2,0,0,2,2,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0}
,                {0,0,0,0,0,0,0,0,0,0,2,2,9,9,9,9,2,2,0,0,2,2,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,2,2,9,9,9,9,9,2,2,0,0,2,2,2,0,0,1,1,2,2,2,1,1,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,2,2,9,9,9,9,9,9,2,2,2,0,0,2,2,2,2,2,2,2,1,1,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,2,2,9,9,9,9,9,9,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,2,2,9,9,9,9,9,9,9,9,9,2,2,2,2,0,0,2,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,9,9,9,9,9,9,9,2,2,0,2,2,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,9,9,9,9,9,2,2,2,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,9,9,9,9,9,2,2,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,9,9,9,9,2,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,9,9,9,9,2,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,9,9,9,9,2,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,2,2,2,9,9,9,9,2,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,2,2,9,9,9,9,2,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,0,0,0,2,2,9,9,9,2,2,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,9,9,9,9,2,0,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,9,9,9,9,9,2,0,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,9,9,9,3,9,2,2,0,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,9,9,9,2,2,2,0,0,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0}
,                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0}

        };

        public static void StructureGen(int xPosO, int yPosO, bool mirrored)
        {
            //Obsidium Heart
            /**
             * 0 = Do Nothing
             * 1 = Lycoris
             * 2 = Radiata
             * 3 = Obsidium Chest
             * 9 = Kill tile
             * */
            

            for (int i = 0; i < _structureArray.GetLength(1); i++)
            {
                for (int j = 0; j < _structureArray.GetLength(0); j++)
                {
                    if (mirrored)
                    {
                        if (TileCheckSafe((int)(xPosO + _structureArray.GetLength(1) - i), (int)(yPosO + j)))
                        {
                            if (_structureArray[j, i] == 1)
                            {
                                WorldGen.KillTile(xPosO + _structureArray.GetLength(1) - i, yPosO + j);
                                WorldGen.PlaceTile(xPosO + _structureArray.GetLength(1) - i, yPosO + j, ModContent.TileType<Lycoris>(), true, true);
                            }
                            if (_structureArray[j, i] == 2)
                            {
                                WorldGen.KillTile(xPosO + _structureArray.GetLength(1) - i, yPosO + j);
                                WorldGen.PlaceTile(xPosO + _structureArray.GetLength(1) - i, yPosO + j, ModContent.TileType<Radiata>(), true, true);
                            }
                            if (_structureArray[j, i] == 3)
                            {
                                LaugicalityWorld.PlaceObsidiumChest(xPosO + _structureArray.GetLength(1) - i, yPosO + j, (ushort)ModContent.TileType<Radiata>());
                            }
                            if (_structureArray[j, i] == 9)
                            {
                                WorldGen.KillTile(xPosO + _structureArray.GetLength(1) - i, yPosO + j);
                            }
                        }
                    }
                    else
                    {
                        if (TileCheckSafe((int)(xPosO + i), (int)(yPosO + j)))
                        {
                            if (_structureArray[j, i] == 1)
                            {
                                WorldGen.KillTile(xPosO + i, yPosO + j);
                                WorldGen.PlaceTile(xPosO + i, yPosO + j, ModContent.TileType<Lycoris>(), true, true);
                            }
                            if (_structureArray[j, i] == 2)
                            {
                                WorldGen.KillTile(xPosO + i, yPosO + j);
                                WorldGen.PlaceTile(xPosO + i, yPosO + j, ModContent.TileType<Radiata>(), true, true);
                            }
                            if (_structureArray[j, i] == 3)
                            {
                                LaugicalityWorld.PlaceObsidiumChest(xPosO + i, yPosO + j, (ushort)ModContent.TileType<Radiata>());
                            }
                            if (_structureArray[j, i] == 9)
                            {
                                WorldGen.KillTile(xPosO + i, yPosO + j);
                            }
                        }
                    }
                }
            }
        }
        
        //Making sure tiles arent out of bounds
        private static bool TileCheckSafe(int i, int j)
        {
            if (i > 1 && i < Main.maxTilesX - 1 && j > 1 && j < Main.maxTilesY - 1)
            {
                //if(LaugicalityVars.obsidiumTiles.Contains(Main.tile[i, j].TileType))
                  //  return true;
            }
            return false;
        }
    }
}